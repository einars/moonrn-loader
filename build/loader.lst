# file opened: src/loader.asm
  1   0000                              device zxspectrum128
  2   0000
  3   0000                              org 0x5ccb
  4   5CCB
  5   5CCB              basic_start equ $
  6   5CCB
  7   5CCB              B_RANDOMIZE equ 0f9h
  8   5CCB              B_USR equ 0c0h
  9   5CCB
 10   5CCB
 11   5CCB              target_code_start equ 32768
 12   5CCB
 13   5CCB                              lua
 14   5CCB ~                            local f
 15   5CCB ~
 16   5CCB ~                            f = io.open("./pristine/moonrn.bin")
 17   5CCB ~                            sj.insert_define("target_code_len", f:seek("end"))
 18   5CCB ~                            f:close()
 19   5CCB ~
 20   5CCB ~                            f = io.open("./build/code.pck")
 21   5CCB ~                            sj.insert_define("packed_code_len", f:seek("end"))
 22   5CCB ~                            f:close()
 23   5CCB ~
 24   5CCB                              endlua
 25   5CCB
 26   5CCB              line10:
 27   5CCB 00 0A                        db 0, 10
 28   5CCD DE 04                        dw End - .cmds
 29   5CCF              .cmds
 30   5CCF F9 C0 31 0E                  db B_RANDOMIZE, B_USR, "1", 14, 0, 0
 30   5CD3 00 00
 31   5CD5 D9 5C                        dw Start
 32   5CD7 00 3A                        db 0, ':'
 33   5CD9
 34   5CD9              Start:
 35   5CD9 31 FF FF                     ld sp, 65535
 36   5CDC AF                           xor a
 37   5CDD FD 77 0E                     ld (iy+14), a
 38   5CE0 D3 FE                        out (254), a
 39   5CE2 21 AC 61                     ld  hl, Image_end ; reverse unpacking
 40   5CE5 11 FF 5A                     ld  de, 0x4000+6912 - 1
 41   5CE8
 42   5CE8 CD 16 5D                     call ue2_unpack
 43   5CEB
 44   5CEB              loader_base equ 65000
 45   5CEB                              ; relocate call to ld_edge
 46   5CEB
 47   5CEB 21 60 FE                     ld hl, ld_edge - load + loader_base
 48   5CEE 22 A2 5D                     ld (rel1), hl
 49   5CF1 22 A5 5D                     ld (rel2), hl
 50   5CF4
 51   5CF4 21 3E 5D                     ld hl, loader_start
 52   5CF7 11 E8 FD                     ld de, loader_base
 53   5CFA 01 7E 01                     ld bc, loader_end - loader_start
 54   5CFD ED B0                        ldir
 55   5CFF
 56   5CFF
 57   5CFF                              ; di
 58   5CFF                              ; halt
 59   5CFF
 60   5CFF
 61   5CFF DD 21 BC 5E                  ld ix, packed_code_start
 62   5D03 11 42 45                     ld de, 17730
 63   5D06 3E FF                        ld a, 255
 64   5D08 37                           scf
 65   5D09
 66   5D09                              ;call 0556h
 67   5D09 CD E8 FD                     call loader_base
 68   5D0C
 69   5D0C 21 00 80                     ld hl, target_code_start
 70   5D0F E5                           push hl
 71   5D10 11 A7 D7                     ld de, target_code_start + 22440 - 1
 72   5D13 21 FD A3                     ld hl, packed_code_start + 17730 - 1
 73   5D16
 74   5D16
 75   5D16              ue2_unpack:
 76   5D16 3E 80                        ld a, 128
 77   5D18
 78   5D18 01 01 00     MainLoop        ld bc,1
 79   5D1B CD 38 5D                     call ReadBit                         ; Literal?
 80   5D1E 38 10                        jr c,CopyBytes
 81   5D20
 82   5D20 CD 38 5D     EliasGamma      call ReadBit
 83   5D23 CB 11                        rl c
 84   5D25 D8                           ret  c                               ; Option to include the end of stream marker.
 85   5D26 CD 38 5D                     call ReadBit
 86   5D29 38 F5                        jr c,EliasGamma
 87   5D2B
 88   5D2B E5                           push hl
 89   5D2C 6E                           ld l,(hl)
 90   5D2D 60                           ld h,b
 91   5D2E 19                           add hl,de
 92   5D2F 23                           inc hl
 93   5D30 ED B8        CopyBytes       lddr
 94   5D32 38 E4                        jr c,MainLoop
 95   5D34 E1                           pop hl
 96   5D35 2B                           dec hl
 97   5D36 18 E0                        jr MainLoop
 98   5D38
 99   5D38 87           ReadBit         add a,a
100   5D39 C0                           ret nz
101   5D3A 7E                           ld a,(hl)
102   5D3B 2B                           dec hl
103   5D3C 17                           rla
104   5D3D C9                           ret
105   5D3E
106   5D3E              loader_start:
107   5D3E                              include "src/fuckerding.inc"
# file opened: ./src/fuckerding.inc
  1+  5D3E              effect_delay equ 6
  2+  5D3E
  3+  5D3E              load:
  4+  5D3E D9                           exx
  5+  5D3F 21 AA FE                     ld hl, lines_reloc
  6+  5D42 0E 06                        ld c, effect_delay
  7+  5D44 41                           ld b, c
  8+  5D45 D9                           exx
  9+  5D46
 10+  5D46 14                           inc d
 11+  5D47 08                           ex af, af
 12+  5D48 15                           dec d
 13+  5D49 F3                           di
 14+  5D4A DB FE                        in a, (254)
 15+  5D4C 1F                           rra
 16+  5D4D E6 20                        and 0x20
 17+  5D4F F6 02                        or 2
 18+  5D51 4F                           ld c, a
 19+  5D52 BF                           cp a
 20+  5D53
 21+  5D53 C0           ld_break        ret nz
 22+  5D54              ld_start
 23+  5D54 CD E7 05                     call rom_ld_edge_1
 24+  5D57 30 FA                        jr nc, ld_break
 25+  5D59
 26+  5D59 21 15 04                     ld hl, 0x415
 27+  5D5C 10 FE        ld_wait         djnz ld_wait
 28+  5D5E 2B                           dec hl
 29+  5D5F 7C                           ld a, h
 30+  5D60 B5                           or l
 31+  5D61 20 F9                        jr nz, ld_wait
 32+  5D63
 33+  5D63 CD E3 05                     call rom_ld_edge_2
 34+  5D66 30 EB                        jr nc, ld_break
 35+  5D68
 36+  5D68              ld_leader
 37+  5D68 06 9C                        ld b, 0x9c
 38+  5D6A CD E3 05                     call rom_ld_edge_2
 39+  5D6D 30 E4                        jr nc, ld_break
 40+  5D6F
 41+  5D6F 3E C6                        ld a, 0xc6
 42+  5D71 B8                           cp b
 43+  5D72 30 E0                        jr nc, ld_start
 44+  5D74
 45+  5D74 24                           inc h
 46+  5D75 20 F1                        jr nz, ld_leader
 47+  5D77
 48+  5D77
 49+  5D77 06 C9        ld_sync         ld b, 0xc9
 50+  5D79 CD E7 05                     call rom_ld_edge_1
 51+  5D7C 30 D5                        jr nc, ld_break
 52+  5D7E
 53+  5D7E 78                           ld a, b
 54+  5D7F FE D4                        cp 0xd4
 55+  5D81 30 F4                        jr nc, ld_sync
 56+  5D83 CD E7 05                     call rom_ld_edge_1
 57+  5D86 D0                           ret nc
 58+  5D87
 59+  5D87                              ; use black screen, as the rom routines mangled it
 60+  5D87 AF                           xor a
 61+  5D88 D3 FE                        out (254), a
 62+  5D8A
 63+  5D8A 06 B0                        ld b, 0xb0
 64+  5D8C
 65+  5D8C 18 11                        jr ld_marker
 66+  5D8E
 67+  5D8E
 68+  5D8E
 69+  5D8E                              ; the loading itself
 70+  5D8E 08           ld_loop         ex af, af
 71+  5D8F 20 05                        jr nz, ld_flag
 72+  5D91
 73+  5D91 DD 75 00                     ld (ix), l
 74+  5D94 18 03                        jr ld_next
 75+  5D96
 76+  5D96              ld_flag
 77+  5D96                              ; handle flag without any checking
 78+  5D96 AF                           xor a  ; af' = Z, flag checked
 79+  5D97 18 03                        jr 2f
 80+  5D99
 81+  5D99              ld_next
 82+  5D99 DD 23                        inc ix
 83+  5D9B 1B           ld_dec          dec de
 84+  5D9C              2
 85+  5D9C 08                           ex af, af
 86+  5D9D
 87+  5D9D 06 B2                        ld b, 0xb2
 88+  5D9F 2E 01        ld_marker       ld l, 1
 89+  5DA1              ld_8_bits
 90+  5DA1
 91+  5DA1 CD B6 5D     rel1+*          call ld_edge
 92+  5DA4                              ;ret nc
 93+  5DA4 CD B6 5D     rel2+*          call ld_edge
 94+  5DA7                              ;ret nc
 95+  5DA7 3E C5                        ld a, 0xc5
 96+  5DA9 B8                           cp b
 97+  5DAA CB 15                        rl l
 98+  5DAC 06 B0                        ld b, 0xb0
 99+  5DAE D2 A1 5D                     jp nc, ld_8_bits
100+  5DB1
101+  5DB1 7A                           ld a, d
102+  5DB2 B3                           or e
103+  5DB3 20 D9                        jr nz, ld_loop
104+  5DB5
105+  5DB5 C9                           ret
106+  5DB6
107+  5DB6              rom_ld_edge_2 equ 0x5e3
108+  5DB6              rom_ld_edge_1 equ 0x5e7
109+  5DB6
110+  5DB6              ;breakpoint equ $-load + loader_base
111+  5DB6              ld_edge
112+  5DB6 D9                           exx
113+  5DB7 00                           nop
114+  5DB8
115+  5DB8 05                           dec b           ; 4
116+  5DB9 28 08                        jr z, do_effect ;12/7 jump = +16
117+  5DBB
118+  5DBB                              ; 4 + 7 + extra jr 12 = 23
119+  5DBB
120+  5DBB 00                           nop
121+  5DBC 00                           nop
122+  5DBD                              ; =31
123+  5DBD
124+  5DBD 00                           nop
125+  5DBE D9                           exx  ; exx nop nop exx = 16
126+  5DBF 3E 13                        ld a, 0x16 - 1 - 2
127+  5DC1 18 22                        jr spin
128+  5DC3
129+  5DC3              do_effect       ; + 16 from above
130+  5DC3
131+  5DC3 41                           ld b, c         ; 4 ; timing constant
132+  5DC4
133+  5DC4                              ; 20 so far
134+  5DC4
135+  5DC4 5E                           ld e, (hl)      ; 7
136+  5DC5 23                           inc hl          ; 6
137+  5DC6 56                           ld d, (hl)      ; 7
138+  5DC7 23                           inc hl          ; 6
139+  5DC8 EB                           ex de, hl       ; 4
140+  5DC9 CB 06                        rlc (hl)         ; 15 ; contended memory thou
141+  5DCB EB                           ex de, hl       ; 4
142+  5DCC                              ; 53
143+  5DCC
144+  5DCC
145+  5DCC 5E                           ld e, (hl)      ; 7
146+  5DCD 23                           inc hl          ; 6
147+  5DCE 56                           ld d, (hl)      ; 7
148+  5DCF 23                           inc hl          ; 6
149+  5DD0 EB                           ex de, hl       ; 4
150+  5DD1 CB 0E                        rrc (hl)         ; 15 ; contended memory thou
151+  5DD3 EB                           ex de, hl       ; 4
152+  5DD4                              ; 53
153+  5DD4
154+  5DD4
155+  5DD4 AF                           xor a
156+  5DD5 B2                           or d            ; 4
157+  5DD6                              ; -- 126
158+  5DD6
159+  5DD6                              ; adjusted: 12+7+10 = 29 either way
160+  5DD6 20 03                        jr nz, ok    ; 12/7
161+  5DD8 21 AA FE                     ld hl, lines_reloc ; 10
162+  5DDB 28 03        ok:             jr z, adj    ; 12/7 symmetric branch timing adjustment
163+  5DDD 11 AA FE                     ld de, lines_reloc ; 10
164+  5DE0              adj:
165+  5DE0                              ; -- + 29 = 155
166+  5DE0 00                           nop
167+  5DE1                              ; 159, ~16*10
168+  5DE1
169+  5DE1 00                           nop
170+  5DE2 D9                           exx  ; exx nop nop exx = 16
171+  5DE3
172+  5DE3 3E 0B                        ld a, 0x16 - 1 - 10
173+  5DE5
174+  5DE5 3D           spin:           dec a           ; ~358 T
175+  5DE6 20 FD                        jr nz, spin     ; 1 dec-loop = 16T
176+  5DE8 A7                           and a
177+  5DE9
178+  5DE9 04           ld_sample       inc b
179+  5DEA C8                           ret z
180+  5DEB
181+  5DEB 3E 7F                        ld a, 0x7f
182+  5DED DB FE                        in a, (0xfe)
183+  5DEF 1F                           rra
184+  5DF0 D0                           ret nc
185+  5DF1
186+  5DF1 A9                           xor c
187+  5DF2 E6 20                        and 0x20
188+  5DF4 28 F3                        jr z, ld_sample
189+  5DF6
190+  5DF6 79                           ld a, c
191+  5DF7 2F                           cpl
192+  5DF8 4F                           ld c, a
193+  5DF9
194+  5DF9                              ;and 7 ; 4
195+  5DF9                              ;or 8 ; 4
196+  5DF9                              ;out (0xfe), a ; 11
197+  5DF9
198+  5DF9 00                           nop
199+  5DFA 00                           nop
200+  5DFB 00                           nop
201+  5DFC 00                           nop
202+  5DFD 00                           nop
203+  5DFE
204+  5DFE 37                           scf
205+  5DFF C9                           ret
206+  5E00
207+  5E00              lines_reloc equ $ - load + loader_base
208+  5E00              lines:
209+  5E00                              lua allpass
210+  5E00 ~                            local line1 = 0x49e0
211+  5E00 ~                            local line2 = line1 + 512
212+  5E00 ~                            local line3 = line2 + 512
213+  5E00 ~
214+  5E00 ~                            sj.add_word(line2 + 16)
215+  5E00 ~                            sj.add_word(line3 + 16)
216+  5E00 ~
217+  5E00 ~                            for i = 1, 15, 1
218+  5E00 ~                            do
219+  5E00 ~                              sj.add_word(line1 + 16 - i)
220+  5E00 ~                              sj.add_word(line1 + 16 + i)
221+  5E00 ~                              sj.add_word(line2 + 16 - i)
222+  5E00 ~                              sj.add_word(line2 + 16 + i)
223+  5E00 ~                              sj.add_word(line3 + 16 - i)
224+  5E00 ~                              sj.add_word(line3 + 16 + i)
225+  5E00 ~                            end
226+  5E00 F0 4B F0 4D                  endlua
226+  5E04 EF 49 F1 49
226+  5E08 EF 4B F1 4B
226+  5E0C EF 4D F1 4D
226+  5E10 EE 49 F2 49
226+  5E14 EE 4B F2 4B
226+  5E18 EE 4D F2 4D
226+  5E1C ED 49 F3 49
226+  5E20 ED 4B F3 4B
226+  5E24 ED 4D F3 4D
226+  5E28 EC 49 F4 49
226+  5E2C EC 4B F4 4B
226+  5E30 EC 4D F4 4D
226+  5E34 EB 49 F5 49
226+  5E38 EB 4B F5 4B
226+  5E3C EB 4D F5 4D
226+  5E40 EA 49 F6 49
226+  5E44 EA 4B F6 4B
226+  5E48 EA 4D F6 4D
226+  5E4C E9 49 F7 49
226+  5E50 E9 4B F7 4B
226+  5E54 E9 4D F7 4D
226+  5E58 E8 49 F8 49
226+  5E5C E8 4B F8 4B
226+  5E60 E8 4D F8 4D
226+  5E64 E7 49 F9 49
226+  5E68 E7 4B F9 4B
226+  5E6C E7 4D F9 4D
226+  5E70 E6 49 FA 49
226+  5E74 E6 4B FA 4B
226+  5E78 E6 4D FA 4D
226+  5E7C E5 49 FB 49
226+  5E80 E5 4B FB 4B
226+  5E84 E5 4D FB 4D
226+  5E88 E4 49 FC 49
226+  5E8C E4 4B FC 4B
226+  5E90 E4 4D FC 4D
226+  5E94 E3 49 FD 49
226+  5E98 E3 4B FD 4B
226+  5E9C E3 4D FD 4D
226+  5EA0 E2 49 FE 49
226+  5EA4 E2 4B FE 4B
226+  5EA8 E2 4D FE 4D
226+  5EAC E1 49 FF 49
226+  5EB0 E1 4B FF 4B
226+  5EB4 E1 4D FF 4D
227+  5EB8 00 00                        dw 0
228+  5EBA 00 00                        dw 0
229+  5EBC
230+  5EBC
231+  5EBC
# file closed: ./src/fuckerding.inc
108   5EBC              loader_end equ $
109   5EBC
110   5EBC              packed_code_start:
111   5EBC                              incbin "build/loading.pck"
112   61AD              Image_end equ $-1
113   61AD
114   61AD              End equ $
115   61AD
116   61AD                  display "Saving moo.tap"
117   61AD                  emptytap "moo.tap"
118   61AD                  savetap  "moo.tap", basic, "MoonRn", basic_start, End - basic_start, 10
119   61AD                  tapout "moo.tap"
120   61AD                  incbin "build/code.pck"
121   A6EF                  tapend
122   A6EF
# file closed: src/loader.asm
