# file opened: src/loader.asm
  1   0000                              device zxspectrum128
  2   0000
  3   0000                              org 0x5ccb
  4   5CCB
  5   5CCB              basic_start equ $
  6   5CCB
  7   5CCB              B_RANDOMIZE equ 0f9h
  8   5CCB              B_USR equ 0c0h
  9   5CCB
 10   5CCB
 11   5CCB              target_code_start equ 32768
 12   5CCB
 13   5CCB                              lua
 14   5CCB ~                            local f
 15   5CCB ~
 16   5CCB ~                            f = io.open("./pristine/moonrn.bin")
 17   5CCB ~                            sj.insert_define("target_code_len", f:seek("end"))
 18   5CCB ~                            f:close()
 19   5CCB ~
 20   5CCB ~                            f = io.open("./build/code.pck")
 21   5CCB ~                            sj.insert_define("packed_code_len", f:seek("end"))
 22   5CCB ~                            f:close()
 23   5CCB ~
 24   5CCB                              endlua
 25   5CCB
 26   5CCB              line10:
 27   5CCB 00 0A                        db 0, 10
 28   5CCD F2 04                        dw End - .cmds
 29   5CCF              .cmds
 30   5CCF F9 C0 31 0E                  db B_RANDOMIZE, B_USR, "1", 14, 0, 0
 30   5CD3 00 00
 31   5CD5 D9 5C                        dw Start
 32   5CD7 00 3A                        db 0, ':'
 33   5CD9
 34   5CD9              Start:
 35   5CD9 31 FF FF                     ld sp, 65535
 36   5CDC AF                           xor a
 37   5CDD FD 77 0E                     ld (iy+14), a
 38   5CE0 D3 FE                        out (254), a
 39   5CE2 21 C0 61                     ld  hl, Image_end ; reverse unpacking
 40   5CE5 11 FF 5A                     ld  de, 0x4000+6912 - 1
 41   5CE8
 42   5CE8 CD 19 5D                     call ue2_unpack
 43   5CEB
 44   5CEB              loader_base equ 65000
 45   5CEB                              ; relocate calls to ld_edge_*
 46   5CEB 21 71 FE                     ld hl, ld_edge_1 - load + loader_base
 47   5CEE                              ;ld hl, rom_ld_edge_1
 48   5CEE                              ;ld (p1_0), hl
 49   5CEE                              ;ld (p1_1), hl
 50   5CEE                              ;ld (p1_2), hl
 51   5CEE 22 C7 5D                     ld (p1_3), hl
 52   5CF1
 53   5CF1 21 6D FE                     ld hl, ld_edge_2 - load + loader_base
 54   5CF4                              ;ld hl, rom_ld_edge_2
 55   5CF4                              ;ld (p2_0), hl
 56   5CF4                              ;ld (p2_1), hl
 57   5CF4 22 B1 5D                     ld (p2_2), hl
 58   5CF7
 59   5CF7 21 41 5D                     ld hl, loader_start
 60   5CFA 11 E8 FD                     ld de, loader_base
 61   5CFD 01 8F 01                     ld bc, loader_end - loader_start
 62   5D00 ED B0                        ldir
 63   5D02
 64   5D02
 65   5D02                              ; di
 66   5D02                              ; halt
 67   5D02
 68   5D02
 69   5D02 DD 21 D0 5E                  ld ix, packed_code_start
 70   5D06 11 42 45                     ld de, 17730
 71   5D09 3E FF                        ld a, 255
 72   5D0B 37                           scf
 73   5D0C
 74   5D0C                              ;call 0556h
 75   5D0C CD E8 FD                     call loader_base
 76   5D0F
 77   5D0F 21 00 80                     ld hl, target_code_start
 78   5D12 E5                           push hl
 79   5D13 11 A7 D7                     ld de, target_code_start + 22440 - 1
 80   5D16 21 11 A4                     ld hl, packed_code_start + 17730 - 1
 81   5D19
 82   5D19
 83   5D19              ue2_unpack:
 84   5D19 3E 80                        ld a, 128
 85   5D1B
 86   5D1B 01 01 00     MainLoop        ld bc,1
 87   5D1E CD 3B 5D                     call ReadBit                         ; Literal?
 88   5D21 38 10                        jr c,CopyBytes
 89   5D23
 90   5D23 CD 3B 5D     EliasGamma      call ReadBit
 91   5D26 CB 11                        rl c
 92   5D28 D8                           ret  c                               ; Option to include the end of stream marker.
 93   5D29 CD 3B 5D                     call ReadBit
 94   5D2C 38 F5                        jr c,EliasGamma
 95   5D2E
 96   5D2E E5                           push hl
 97   5D2F 6E                           ld l,(hl)
 98   5D30 60                           ld h,b
 99   5D31 19                           add hl,de
100   5D32 23                           inc hl
101   5D33 ED B8        CopyBytes       lddr
102   5D35 38 E4                        jr c,MainLoop
103   5D37 E1                           pop hl
104   5D38 2B                           dec hl
105   5D39 18 E0                        jr MainLoop
106   5D3B
107   5D3B 87           ReadBit         add a,a
108   5D3C C0                           ret nz
109   5D3D 7E                           ld a,(hl)
110   5D3E 2B                           dec hl
111   5D3F 17                           rla
112   5D40 C9                           ret
113   5D41
114   5D41              loader_start:
115   5D41                              include "src/fuckerding.inc"
# file opened: ./src/fuckerding.inc
  1+  5D41              effect_delay equ 5
  2+  5D41
  3+  5D41              load:
  4+  5D41 D9                           exx
  5+  5D42 21 BB FE                     ld hl, lines_reloc
  6+  5D45 06 05                        ld b, effect_delay
  7+  5D47 0E 05                        ld c, effect_delay
  8+  5D49 D9                           exx
  9+  5D4A
 10+  5D4A 14                           inc d
 11+  5D4B 08                           ex af, af
 12+  5D4C 15                           dec d
 13+  5D4D F3                           di
 14+  5D4E DB FE                        in a, (254)
 15+  5D50 1F                           rra
 16+  5D51 E6 20                        and 0x20
 17+  5D53 F6 02                        or 2
 18+  5D55 4F                           ld c, a
 19+  5D56 BF                           cp a
 20+  5D57
 21+  5D57 C0           ld_break        ret nz
 22+  5D58              ld_start
 23+  5D58 CD E7 05                     call rom_ld_edge_1
 24+  5D5B 30 FA                        jr nc, ld_break
 25+  5D5D
 26+  5D5D 21 15 04                     ld hl, 0x415
 27+  5D60 10 FE        ld_wait         djnz ld_wait
 28+  5D62 2B                           dec hl
 29+  5D63 7C                           ld a, h
 30+  5D64 B5                           or l
 31+  5D65 20 F9                        jr nz, ld_wait
 32+  5D67
 33+  5D67 CD E3 05                     call rom_ld_edge_2
 34+  5D6A 30 EB                        jr nc, ld_break
 35+  5D6C
 36+  5D6C              ld_leader
 37+  5D6C 06 9C                        ld b, 0x9c
 38+  5D6E CD E3 05                     call rom_ld_edge_2
 39+  5D71 30 E4                        jr nc, ld_break
 40+  5D73
 41+  5D73 3E C6                        ld a, 0xc6
 42+  5D75 B8                           cp b
 43+  5D76 30 E0                        jr nc, ld_start
 44+  5D78
 45+  5D78 24                           inc h
 46+  5D79 20 F1                        jr nz, ld_leader
 47+  5D7B
 48+  5D7B
 49+  5D7B 06 C9        ld_sync         ld b, 0xc9
 50+  5D7D CD E7 05                     call rom_ld_edge_1
 51+  5D80 30 D5                        jr nc, ld_break
 52+  5D82
 53+  5D82 78                           ld a, b
 54+  5D83 FE D4                        cp 0xd4
 55+  5D85 30 F4                        jr nc, ld_sync
 56+  5D87 CD E7 05                     call rom_ld_edge_1
 57+  5D8A D0                           ret nc
 58+  5D8B
 59+  5D8B                              ; use normal screen
 60+  5D8B AF                           xor a
 61+  5D8C D3 FE                        out (254), a
 62+  5D8E
 63+  5D8E 79                           ld a, c
 64+  5D8F EE 03                        xor 3
 65+  5D91 4F                           ld c, a
 66+  5D92 26 00                        ld h, 0
 67+  5D94 06 B0                        ld b, 0xb0
 68+  5D96
 69+  5D96 18 16                        jr ld_marker
 70+  5D98
 71+  5D98 08           ld_loop         ex af, af
 72+  5D99 20 05                        jr nz, ld_flag
 73+  5D9B DD 75 00                     ld (ix), l
 74+  5D9E 18 08                        jr ld_next
 75+  5DA0
 76+  5DA0 CB 11        ld_flag         rl c
 77+  5DA2 AD                           xor l
 78+  5DA3                              ;xor l
 79+  5DA3                              ;ret nz
 80+  5DA3 79                           ld a, c
 81+  5DA4 1F                           rra
 82+  5DA5 4F                           ld c, a
 83+  5DA6                              ;inc de
 84+  5DA6 18 03                        jr 2f
 85+  5DA8
 86+  5DA8              ld_next
 87+  5DA8 DD 23                        inc ix
 88+  5DAA 1B           ld_dec          dec de
 89+  5DAB              2
 90+  5DAB 08                           ex af, af
 91+  5DAC
 92+  5DAC 06 B2                        ld b, 0xb2
 93+  5DAE 2E 01        ld_marker       ld l, 1
 94+  5DB0              ld_8_bits
 95+  5DB0 CD C6 5D     p2_2+*          call ld_edge_2
 96+  5DB3 D0                           ret nc
 97+  5DB4 3E C5                        ld a, 0xc5
 98+  5DB6 B8                           cp b
 99+  5DB7 CB 15                        rl l
100+  5DB9 06 B0                        ld b, 0xb0
101+  5DBB D2 B0 5D                     jp nc, ld_8_bits
102+  5DBE
103+  5DBE 7C                           ld a, h
104+  5DBF AD                           xor l
105+  5DC0 67                           ld h, a
106+  5DC1
107+  5DC1 7A                           ld a, d
108+  5DC2 B3                           or e
109+  5DC3 20 D3                        jr nz, ld_loop
110+  5DC5
111+  5DC5 C9                           ret
112+  5DC6
113+  5DC6              rom_ld_edge_2 equ 0x5e3
114+  5DC6              rom_ld_edge_1 equ 0x5e7
115+  5DC6
116+  5DC6              ld_edge_2
117+  5DC6 CD CA 5D     p1_3+*:         call ld_edge_1
118+  5DC9 D0                           ret nc
119+  5DCA              ;breakpoint equ $-load + loader_base
120+  5DCA              ld_edge_1
121+  5DCA D9                           exx
122+  5DCB 00                           nop
123+  5DCC
124+  5DCC 05                           dec b           ; 4
125+  5DCD 28 08                        jr z, do_effect ;12/7 jump = +16
126+  5DCF                              ; 4 + 7 + jr 12 = 23
127+  5DCF 00                           nop
128+  5DD0 00                           nop
129+  5DD1                              ; =31
130+  5DD1
131+  5DD1 00                           nop
132+  5DD2 D9                           exx  ; exx nop nop exx = 16
133+  5DD3 3E 13                        ld a, 0x16 - 1 - 2
134+  5DD5 18 22                        jr spin
135+  5DD7
136+  5DD7              do_effect       ; + 16 from above
137+  5DD7 41                           ld b, c         ; 4 ; timing constant
138+  5DD8                              ; 20 so far
139+  5DD8
140+  5DD8 5E                           ld e, (hl)      ; 7
141+  5DD9 23                           inc hl          ; 6
142+  5DDA 56                           ld d, (hl)      ; 7
143+  5DDB 23                           inc hl          ; 6
144+  5DDC EB                           ex de, hl       ; 4
145+  5DDD CB 06                        rlc (hl)         ; 15 ; contended memory thou
146+  5DDF EB                           ex de, hl       ; 4
147+  5DE0                              ; 53
148+  5DE0
149+  5DE0 5E                           ld e, (hl)      ; 7
150+  5DE1 23                           inc hl          ; 6
151+  5DE2 56                           ld d, (hl)      ; 7
152+  5DE3 23                           inc hl          ; 6
153+  5DE4 EB                           ex de, hl       ; 4
154+  5DE5 CB 0E                        rrc (hl)         ; 15 ; contended memory thou
155+  5DE7 EB                           ex de, hl       ; 4
156+  5DE8                              ; 53
157+  5DE8
158+  5DE8 AF                           xor a           ; 4
159+  5DE9 B2                           or d            ; 4
160+  5DEA                              ; -- 126
161+  5DEA
162+  5DEA                              ; adjusted: 12+7+10 = 29 either way
163+  5DEA 20 03                        jr nz, ok    ; 12/7
164+  5DEC 21 BB FE                     ld hl, lines_reloc ; 10
165+  5DEF 28 03        ok:             jr z, adj    ; 12/7 symmetric branch timing adjustment
166+  5DF1 11 BB FE                     ld de, lines_reloc ; 10
167+  5DF4              adj:
168+  5DF4                              ; -- + 29 = 155
169+  5DF4 00                           nop
170+  5DF5                              ; 159, ~16*10
171+  5DF5
172+  5DF5 00                           nop
173+  5DF6 D9                           exx  ; exx nop nop exx = 16
174+  5DF7
175+  5DF7 3E 0B                        ld a, 0x16 - 1 - 10
176+  5DF9
177+  5DF9 3D           spin:           dec a           ; ~358 T
178+  5DFA 20 FD                        jr nz, spin     ; 1 dec-loop = 16T
179+  5DFC A7                           and a
180+  5DFD
181+  5DFD 04           ld_sample       inc b
182+  5DFE C8                           ret z
183+  5DFF
184+  5DFF 3E 7F                        ld a, 0x7f
185+  5E01 DB FE                        in a, (0xfe)
186+  5E03 1F                           rra
187+  5E04 D0                           ret nc
188+  5E05
189+  5E05 A9                           xor c
190+  5E06 E6 20                        and 0x20
191+  5E08 28 F3                        jr z, ld_sample
192+  5E0A
193+  5E0A 79                           ld a, c
194+  5E0B 2F                           cpl
195+  5E0C 4F                           ld c, a
196+  5E0D
197+  5E0D                              ;and 7 ; 4
198+  5E0D                              ;or 8 ; 4
199+  5E0D                              ;out (0xfe), a ; 11
200+  5E0D 00                           nop
201+  5E0E 00                           nop
202+  5E0F 00                           nop
203+  5E10 00                           nop
204+  5E11 00                           nop
205+  5E12
206+  5E12 37                           scf
207+  5E13 C9                           ret
208+  5E14
209+  5E14              lines_reloc equ $ - load + loader_base
210+  5E14              lines:
211+  5E14                              lua allpass
212+  5E14 ~                            local line1 = 0x49e0
213+  5E14 ~                            local line2 = line1 + 512
214+  5E14 ~                            local line3 = line2 + 512
215+  5E14 ~
216+  5E14 ~                            sj.add_word(line2 + 16)
217+  5E14 ~                            sj.add_word(line3 + 16)
218+  5E14 ~
219+  5E14 ~                            for i = 1, 15, 1
220+  5E14 ~                            do
221+  5E14 ~                              sj.add_word(line1 + 16 - i)
222+  5E14 ~                              sj.add_word(line1 + 16 + i)
223+  5E14 ~                              sj.add_word(line2 + 16 - i)
224+  5E14 ~                              sj.add_word(line2 + 16 + i)
225+  5E14 ~                              sj.add_word(line3 + 16 - i)
226+  5E14 ~                              sj.add_word(line3 + 16 + i)
227+  5E14 ~                            end
228+  5E14 F0 4B F0 4D                  endlua
228+  5E18 EF 49 F1 49
228+  5E1C EF 4B F1 4B
228+  5E20 EF 4D F1 4D
228+  5E24 EE 49 F2 49
228+  5E28 EE 4B F2 4B
228+  5E2C EE 4D F2 4D
228+  5E30 ED 49 F3 49
228+  5E34 ED 4B F3 4B
228+  5E38 ED 4D F3 4D
228+  5E3C EC 49 F4 49
228+  5E40 EC 4B F4 4B
228+  5E44 EC 4D F4 4D
228+  5E48 EB 49 F5 49
228+  5E4C EB 4B F5 4B
228+  5E50 EB 4D F5 4D
228+  5E54 EA 49 F6 49
228+  5E58 EA 4B F6 4B
228+  5E5C EA 4D F6 4D
228+  5E60 E9 49 F7 49
228+  5E64 E9 4B F7 4B
228+  5E68 E9 4D F7 4D
228+  5E6C E8 49 F8 49
228+  5E70 E8 4B F8 4B
228+  5E74 E8 4D F8 4D
228+  5E78 E7 49 F9 49
228+  5E7C E7 4B F9 4B
228+  5E80 E7 4D F9 4D
228+  5E84 E6 49 FA 49
228+  5E88 E6 4B FA 4B
228+  5E8C E6 4D FA 4D
228+  5E90 E5 49 FB 49
228+  5E94 E5 4B FB 4B
228+  5E98 E5 4D FB 4D
228+  5E9C E4 49 FC 49
228+  5EA0 E4 4B FC 4B
228+  5EA4 E4 4D FC 4D
228+  5EA8 E3 49 FD 49
228+  5EAC E3 4B FD 4B
228+  5EB0 E3 4D FD 4D
228+  5EB4 E2 49 FE 49
228+  5EB8 E2 4B FE 4B
228+  5EBC E2 4D FE 4D
228+  5EC0 E1 49 FF 49
228+  5EC4 E1 4B FF 4B
228+  5EC8 E1 4D FF 4D
229+  5ECC 00 00                        dw 0
230+  5ECE 00 00                        dw 0
231+  5ED0
232+  5ED0
233+  5ED0
# file closed: ./src/fuckerding.inc
116   5ED0              loader_end equ $
117   5ED0
118   5ED0              packed_code_start:
119   5ED0                              incbin "build/loading.pck"
120   61C1              Image_end equ $-1
121   61C1
122   61C1              End equ $
123   61C1
124   61C1                  display "Saving moo.tap"
125   61C1                  emptytap "moo.tap"
126   61C1                  savetap  "moo.tap", basic, "MoonRn", basic_start, End - basic_start, 10
127   61C1                  tapout "moo.tap"
128   61C1                  incbin "build/code.pck"
129   A703                  tapend
130   A703
# file closed: src/loader.asm
