# file opened: src/loader.asm
  1   0000                              device zxspectrum128
  2   0000
  3   0000                              org 0x5ccb
  4   5CCB
  5   5CCB              basic_start equ $
  6   5CCB
  7   5CCB              B_RANDOMIZE equ 0f9h
  8   5CCB              B_USR equ 0c0h
  9   5CCB
 10   5CCB
 11   5CCB              target_code_start equ 32768
 12   5CCB
 13   5CCB                              lua
 14   5CCB ~                            local f
 15   5CCB ~
 16   5CCB ~                            f = io.open("./pristine/moonrn.bin")
 17   5CCB ~                            sj.insert_define("target_code_len", f:seek("end"))
 18   5CCB ~                            f:close()
 19   5CCB ~
 20   5CCB ~                            f = io.open("./build/code.pck")
 21   5CCB ~                            sj.insert_define("packed_code_len", f:seek("end"))
 22   5CCB ~                            f:close()
 23   5CCB ~
 24   5CCB                              endlua
 25   5CCB
 26   5CCB              line10:
 27   5CCB 00 0A                        db 0, 10
 28   5CCD E9 04                        dw End - .cmds
 29   5CCF              .cmds
 30   5CCF F9 C0 31 0E                  db B_RANDOMIZE, B_USR, "1", 14, 0, 0
 30   5CD3 00 00
 31   5CD5 D9 5C                        dw Start
 32   5CD7 00 3A                        db 0, ':'
 33   5CD9
 34   5CD9              Start:
 35   5CD9 31 FF FF                     ld sp, 65535
 36   5CDC AF                           xor a
 37   5CDD FD 77 0E                     ld (iy+14), a
 38   5CE0 D3 FE                        out (254), a
 39   5CE2 21 B7 61                     ld  hl, Image_end ; reverse unpacking
 40   5CE5 11 FF 5A                     ld  de, 0x4000+6912 - 1
 41   5CE8
 42   5CE8 CD 19 5D                     call ue2_unpack
 43   5CEB
 44   5CEB              loader_base equ 65000
 45   5CEB                              ; relocate calls to ld_edge_*
 46   5CEB 21 68 FE                     ld hl, ld_edge_1 - load + loader_base
 47   5CEE 22 BE 5D                     ld (rel1), hl
 48   5CF1
 49   5CF1 21 64 FE                     ld hl, ld_edge_2 - load + loader_base
 50   5CF4 22 A8 5D                     ld (rel2), hl
 51   5CF7
 52   5CF7 21 41 5D                     ld hl, loader_start
 53   5CFA 11 E8 FD                     ld de, loader_base
 54   5CFD 01 86 01                     ld bc, loader_end - loader_start
 55   5D00 ED B0                        ldir
 56   5D02
 57   5D02
 58   5D02                              ; di
 59   5D02                              ; halt
 60   5D02
 61   5D02
 62   5D02 DD 21 C7 5E                  ld ix, packed_code_start
 63   5D06 11 42 45                     ld de, 17730
 64   5D09 3E FF                        ld a, 255
 65   5D0B 37                           scf
 66   5D0C
 67   5D0C                              ;call 0556h
 68   5D0C CD E8 FD                     call loader_base
 69   5D0F
 70   5D0F 21 00 80                     ld hl, target_code_start
 71   5D12 E5                           push hl
 72   5D13 11 A7 D7                     ld de, target_code_start + 22440 - 1
 73   5D16 21 08 A4                     ld hl, packed_code_start + 17730 - 1
 74   5D19
 75   5D19
 76   5D19              ue2_unpack:
 77   5D19 3E 80                        ld a, 128
 78   5D1B
 79   5D1B 01 01 00     MainLoop        ld bc,1
 80   5D1E CD 3B 5D                     call ReadBit                         ; Literal?
 81   5D21 38 10                        jr c,CopyBytes
 82   5D23
 83   5D23 CD 3B 5D     EliasGamma      call ReadBit
 84   5D26 CB 11                        rl c
 85   5D28 D8                           ret  c                               ; Option to include the end of stream marker.
 86   5D29 CD 3B 5D                     call ReadBit
 87   5D2C 38 F5                        jr c,EliasGamma
 88   5D2E
 89   5D2E E5                           push hl
 90   5D2F 6E                           ld l,(hl)
 91   5D30 60                           ld h,b
 92   5D31 19                           add hl,de
 93   5D32 23                           inc hl
 94   5D33 ED B8        CopyBytes       lddr
 95   5D35 38 E4                        jr c,MainLoop
 96   5D37 E1                           pop hl
 97   5D38 2B                           dec hl
 98   5D39 18 E0                        jr MainLoop
 99   5D3B
100   5D3B 87           ReadBit         add a,a
101   5D3C C0                           ret nz
102   5D3D 7E                           ld a,(hl)
103   5D3E 2B                           dec hl
104   5D3F 17                           rla
105   5D40 C9                           ret
106   5D41
107   5D41              loader_start:
108   5D41                              include "src/fuckerding.inc"
# file opened: ./src/fuckerding.inc
  1+  5D41              effect_delay equ 6
  2+  5D41
  3+  5D41              load:
  4+  5D41 D9                           exx
  5+  5D42 21 B2 FE                     ld hl, lines_reloc
  6+  5D45 06 06                        ld b, effect_delay
  7+  5D47 0E 06                        ld c, effect_delay
  8+  5D49 D9                           exx
  9+  5D4A
 10+  5D4A 14                           inc d
 11+  5D4B 08                           ex af, af
 12+  5D4C 15                           dec d
 13+  5D4D F3                           di
 14+  5D4E DB FE                        in a, (254)
 15+  5D50 1F                           rra
 16+  5D51 E6 20                        and 0x20
 17+  5D53 F6 02                        or 2
 18+  5D55 4F                           ld c, a
 19+  5D56 BF                           cp a
 20+  5D57
 21+  5D57 C0           ld_break        ret nz
 22+  5D58              ld_start
 23+  5D58 CD E7 05                     call rom_ld_edge_1
 24+  5D5B 30 FA                        jr nc, ld_break
 25+  5D5D
 26+  5D5D 21 15 04                     ld hl, 0x415
 27+  5D60 10 FE        ld_wait         djnz ld_wait
 28+  5D62 2B                           dec hl
 29+  5D63 7C                           ld a, h
 30+  5D64 B5                           or l
 31+  5D65 20 F9                        jr nz, ld_wait
 32+  5D67
 33+  5D67 CD E3 05                     call rom_ld_edge_2
 34+  5D6A 30 EB                        jr nc, ld_break
 35+  5D6C
 36+  5D6C              ld_leader
 37+  5D6C 06 9C                        ld b, 0x9c
 38+  5D6E CD E3 05                     call rom_ld_edge_2
 39+  5D71 30 E4                        jr nc, ld_break
 40+  5D73
 41+  5D73 3E C6                        ld a, 0xc6
 42+  5D75 B8                           cp b
 43+  5D76 30 E0                        jr nc, ld_start
 44+  5D78
 45+  5D78 24                           inc h
 46+  5D79 20 F1                        jr nz, ld_leader
 47+  5D7B
 48+  5D7B
 49+  5D7B 06 C9        ld_sync         ld b, 0xc9
 50+  5D7D CD E7 05                     call rom_ld_edge_1
 51+  5D80 30 D5                        jr nc, ld_break
 52+  5D82
 53+  5D82 78                           ld a, b
 54+  5D83 FE D4                        cp 0xd4
 55+  5D85 30 F4                        jr nc, ld_sync
 56+  5D87 CD E7 05                     call rom_ld_edge_1
 57+  5D8A D0                           ret nc
 58+  5D8B
 59+  5D8B                              ; use black screen, as the rom routines mangled it
 60+  5D8B AF                           xor a
 61+  5D8C D3 FE                        out (254), a
 62+  5D8E
 63+  5D8E 26 00                        ld h, 0
 64+  5D90 06 B0                        ld b, 0xb0
 65+  5D92
 66+  5D92 18 11                        jr ld_marker
 67+  5D94
 68+  5D94 08           ld_loop         ex af, af
 69+  5D95 20 05                        jr nz, ld_flag
 70+  5D97
 71+  5D97 DD 75 00                     ld (ix), l
 72+  5D9A 18 03                        jr ld_next
 73+  5D9C
 74+  5D9C              ld_flag
 75+  5D9C                              ; handle flag without any checking
 76+  5D9C AF                           xor a  ; af' = Z, flag checked
 77+  5D9D 18 03                        jr 2f
 78+  5D9F
 79+  5D9F              ld_next
 80+  5D9F DD 23                        inc ix
 81+  5DA1 1B           ld_dec          dec de
 82+  5DA2              2
 83+  5DA2 08                           ex af, af
 84+  5DA3
 85+  5DA3 06 B2                        ld b, 0xb2
 86+  5DA5 2E 01        ld_marker       ld l, 1
 87+  5DA7              ld_8_bits
 88+  5DA7 CD BD 5D     rel2+*          call ld_edge_2
 89+  5DAA D0                           ret nc
 90+  5DAB 3E C5                        ld a, 0xc5
 91+  5DAD B8                           cp b
 92+  5DAE CB 15                        rl l
 93+  5DB0 06 B0                        ld b, 0xb0
 94+  5DB2 D2 A7 5D                     jp nc, ld_8_bits
 95+  5DB5
 96+  5DB5 7C                           ld a, h
 97+  5DB6 AD                           xor l
 98+  5DB7 67                           ld h, a
 99+  5DB8
100+  5DB8 7A                           ld a, d
101+  5DB9 B3                           or e
102+  5DBA 20 D8                        jr nz, ld_loop
103+  5DBC
104+  5DBC C9                           ret
105+  5DBD
106+  5DBD              rom_ld_edge_2 equ 0x5e3
107+  5DBD              rom_ld_edge_1 equ 0x5e7
108+  5DBD
109+  5DBD              ld_edge_2
110+  5DBD CD C1 5D     rel1+*:         call ld_edge_1
111+  5DC0 D0                           ret nc
112+  5DC1              ;breakpoint equ $-load + loader_base
113+  5DC1              ld_edge_1
114+  5DC1 D9                           exx
115+  5DC2 00                           nop
116+  5DC3
117+  5DC3 05                           dec b           ; 4
118+  5DC4 28 08                        jr z, do_effect ;12/7 jump = +16
119+  5DC6
120+  5DC6                              ; 4 + 7 + extra jr 12 = 23
121+  5DC6
122+  5DC6 00                           nop
123+  5DC7 00                           nop
124+  5DC8                              ; =31
125+  5DC8
126+  5DC8 00                           nop
127+  5DC9 D9                           exx  ; exx nop nop exx = 16
128+  5DCA 3E 13                        ld a, 0x16 - 1 - 2
129+  5DCC 18 22                        jr spin
130+  5DCE
131+  5DCE              do_effect       ; + 16 from above
132+  5DCE
133+  5DCE 41                           ld b, c         ; 4 ; timing constant
134+  5DCF
135+  5DCF                              ; 20 so far
136+  5DCF
137+  5DCF 5E                           ld e, (hl)      ; 7
138+  5DD0 23                           inc hl          ; 6
139+  5DD1 56                           ld d, (hl)      ; 7
140+  5DD2 23                           inc hl          ; 6
141+  5DD3 EB                           ex de, hl       ; 4
142+  5DD4 CB 06                        rlc (hl)         ; 15 ; contended memory thou
143+  5DD6 EB                           ex de, hl       ; 4
144+  5DD7                              ; 53
145+  5DD7
146+  5DD7
147+  5DD7 5E                           ld e, (hl)      ; 7
148+  5DD8 23                           inc hl          ; 6
149+  5DD9 56                           ld d, (hl)      ; 7
150+  5DDA 23                           inc hl          ; 6
151+  5DDB EB                           ex de, hl       ; 4
152+  5DDC CB 0E                        rrc (hl)         ; 15 ; contended memory thou
153+  5DDE EB                           ex de, hl       ; 4
154+  5DDF                              ; 53
155+  5DDF
156+  5DDF
157+  5DDF AF                           xor a
158+  5DE0 B2                           or d            ; 4
159+  5DE1                              ; -- 126
160+  5DE1
161+  5DE1                              ; adjusted: 12+7+10 = 29 either way
162+  5DE1 20 03                        jr nz, ok    ; 12/7
163+  5DE3 21 B2 FE                     ld hl, lines_reloc ; 10
164+  5DE6 28 03        ok:             jr z, adj    ; 12/7 symmetric branch timing adjustment
165+  5DE8 11 B2 FE                     ld de, lines_reloc ; 10
166+  5DEB              adj:
167+  5DEB                              ; -- + 29 = 155
168+  5DEB 00                           nop
169+  5DEC                              ; 159, ~16*10
170+  5DEC
171+  5DEC 00                           nop
172+  5DED D9                           exx  ; exx nop nop exx = 16
173+  5DEE
174+  5DEE 3E 0B                        ld a, 0x16 - 1 - 10
175+  5DF0
176+  5DF0 3D           spin:           dec a           ; ~358 T
177+  5DF1 20 FD                        jr nz, spin     ; 1 dec-loop = 16T
178+  5DF3 A7                           and a
179+  5DF4
180+  5DF4 04           ld_sample       inc b
181+  5DF5 C8                           ret z
182+  5DF6
183+  5DF6 3E 7F                        ld a, 0x7f
184+  5DF8 DB FE                        in a, (0xfe)
185+  5DFA 1F                           rra
186+  5DFB D0                           ret nc
187+  5DFC
188+  5DFC A9                           xor c
189+  5DFD E6 20                        and 0x20
190+  5DFF 28 F3                        jr z, ld_sample
191+  5E01
192+  5E01 79                           ld a, c
193+  5E02 2F                           cpl
194+  5E03 4F                           ld c, a
195+  5E04
196+  5E04                              ;and 7 ; 4
197+  5E04                              ;or 8 ; 4
198+  5E04                              ;out (0xfe), a ; 11
199+  5E04
200+  5E04 00                           nop
201+  5E05 00                           nop
202+  5E06 00                           nop
203+  5E07 00                           nop
204+  5E08 00                           nop
205+  5E09
206+  5E09 37                           scf
207+  5E0A C9                           ret
208+  5E0B
209+  5E0B              lines_reloc equ $ - load + loader_base
210+  5E0B              lines:
211+  5E0B                              lua allpass
212+  5E0B ~                            local line1 = 0x49e0
213+  5E0B ~                            local line2 = line1 + 512
214+  5E0B ~                            local line3 = line2 + 512
215+  5E0B ~
216+  5E0B ~                            sj.add_word(line2 + 16)
217+  5E0B ~                            sj.add_word(line3 + 16)
218+  5E0B ~
219+  5E0B ~                            for i = 1, 15, 1
220+  5E0B ~                            do
221+  5E0B ~                              sj.add_word(line1 + 16 - i)
222+  5E0B ~                              sj.add_word(line1 + 16 + i)
223+  5E0B ~                              sj.add_word(line2 + 16 - i)
224+  5E0B ~                              sj.add_word(line2 + 16 + i)
225+  5E0B ~                              sj.add_word(line3 + 16 - i)
226+  5E0B ~                              sj.add_word(line3 + 16 + i)
227+  5E0B ~                            end
228+  5E0B F0 4B F0 4D                  endlua
228+  5E0F EF 49 F1 49
228+  5E13 EF 4B F1 4B
228+  5E17 EF 4D F1 4D
228+  5E1B EE 49 F2 49
228+  5E1F EE 4B F2 4B
228+  5E23 EE 4D F2 4D
228+  5E27 ED 49 F3 49
228+  5E2B ED 4B F3 4B
228+  5E2F ED 4D F3 4D
228+  5E33 EC 49 F4 49
228+  5E37 EC 4B F4 4B
228+  5E3B EC 4D F4 4D
228+  5E3F EB 49 F5 49
228+  5E43 EB 4B F5 4B
228+  5E47 EB 4D F5 4D
228+  5E4B EA 49 F6 49
228+  5E4F EA 4B F6 4B
228+  5E53 EA 4D F6 4D
228+  5E57 E9 49 F7 49
228+  5E5B E9 4B F7 4B
228+  5E5F E9 4D F7 4D
228+  5E63 E8 49 F8 49
228+  5E67 E8 4B F8 4B
228+  5E6B E8 4D F8 4D
228+  5E6F E7 49 F9 49
228+  5E73 E7 4B F9 4B
228+  5E77 E7 4D F9 4D
228+  5E7B E6 49 FA 49
228+  5E7F E6 4B FA 4B
228+  5E83 E6 4D FA 4D
228+  5E87 E5 49 FB 49
228+  5E8B E5 4B FB 4B
228+  5E8F E5 4D FB 4D
228+  5E93 E4 49 FC 49
228+  5E97 E4 4B FC 4B
228+  5E9B E4 4D FC 4D
228+  5E9F E3 49 FD 49
228+  5EA3 E3 4B FD 4B
228+  5EA7 E3 4D FD 4D
228+  5EAB E2 49 FE 49
228+  5EAF E2 4B FE 4B
228+  5EB3 E2 4D FE 4D
228+  5EB7 E1 49 FF 49
228+  5EBB E1 4B FF 4B
228+  5EBF E1 4D FF 4D
229+  5EC3 00 00                        dw 0
230+  5EC5 00 00                        dw 0
231+  5EC7
232+  5EC7
233+  5EC7
# file closed: ./src/fuckerding.inc
109   5EC7              loader_end equ $
110   5EC7
111   5EC7              packed_code_start:
112   5EC7                              incbin "build/loading.pck"
113   61B8              Image_end equ $-1
114   61B8
115   61B8              End equ $
116   61B8
117   61B8                  display "Saving moo.tap"
118   61B8                  emptytap "moo.tap"
119   61B8                  savetap  "moo.tap", basic, "MoonRn", basic_start, End - basic_start, 10
120   61B8                  tapout "moo.tap"
121   61B8                  incbin "build/code.pck"
122   A6FA                  tapend
123   A6FA
# file closed: src/loader.asm
