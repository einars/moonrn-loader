# file opened: src/loader.asm
  1   0000                              device zxspectrum128
  2   0000
  3   0000                              org 0x5ccb
  4   5CCB
  5   5CCB              basic_start equ $
  6   5CCB
  7   5CCB              B_RANDOMIZE equ 0f9h
  8   5CCB              B_USR equ 0c0h
  9   5CCB
 10   5CCB
 11   5CCB              target_code_start equ 32768
 12   5CCB
 13   5CCB                              lua
 14   5CCB ~                            local f
 15   5CCB ~
 16   5CCB ~                            f = io.open("./pristine/moonrn.bin")
 17   5CCB ~                            sj.insert_define("target_code_len", f:seek("end"))
 18   5CCB ~                            f:close()
 19   5CCB ~
 20   5CCB ~                            f = io.open("./build/code.pck")
 21   5CCB ~                            sj.insert_define("packed_code_len", f:seek("end"))
 22   5CCB ~                            f:close()
 23   5CCB ~
 24   5CCB                              endlua
 25   5CCB
 26   5CCB              line10:
 27   5CCB 00 0A                        db 0, 10
 28   5CCD EB 04                        dw End - .cmds
 29   5CCF              .cmds
 30   5CCF F9 C0 31 0E                  db B_RANDOMIZE, B_USR, "1", 14, 0, 0
 30   5CD3 00 00
 31   5CD5 D9 5C                        dw Start
 32   5CD7 00 3A                        db 0, ':'
 33   5CD9
 34   5CD9              Start:
 35   5CD9 31 FF FF                     ld sp, 65535
 36   5CDC AF                           xor a
 37   5CDD FD 77 0E                     ld (iy+14), a
 38   5CE0 D3 FE                        out (254), a
 39   5CE2 21 B9 61                     ld  hl, Image_end ; reverse unpacking
 40   5CE5 11 FF 5A                     ld  de, 0x4000+6912 - 1
 41   5CE8
 42   5CE8 CD 19 5D                     call ue2_unpack
 43   5CEB
 44   5CEB              loader_base equ 65000
 45   5CEB                              ; relocate calls to ld_edge_*
 46   5CEB 21 68 FE                     ld hl, ld_edge_1 - load + loader_base
 47   5CEE 22 BE 5D                     ld (rel1), hl
 48   5CF1
 49   5CF1 21 64 FE                     ld hl, ld_edge_2 - load + loader_base
 50   5CF4 22 A8 5D                     ld (rel2), hl
 51   5CF7
 52   5CF7 21 41 5D                     ld hl, loader_start
 53   5CFA 11 E8 FD                     ld de, loader_base
 54   5CFD 01 88 01                     ld bc, loader_end - loader_start
 55   5D00 ED B0                        ldir
 56   5D02
 57   5D02
 58   5D02                              ; di
 59   5D02                              ; halt
 60   5D02
 61   5D02
 62   5D02 DD 21 C9 5E                  ld ix, packed_code_start
 63   5D06 11 42 45                     ld de, 17730
 64   5D09 3E FF                        ld a, 255
 65   5D0B 37                           scf
 66   5D0C
 67   5D0C                              ;call 0556h
 68   5D0C CD E8 FD                     call loader_base
 69   5D0F
 70   5D0F 21 00 80                     ld hl, target_code_start
 71   5D12 E5                           push hl
 72   5D13 11 A7 D7                     ld de, target_code_start + 22440 - 1
 73   5D16 21 0A A4                     ld hl, packed_code_start + 17730 - 1
 74   5D19
 75   5D19
 76   5D19              ue2_unpack:
 77   5D19 3E 80                        ld a, 128
 78   5D1B
 79   5D1B 01 01 00     MainLoop        ld bc,1
 80   5D1E CD 3B 5D                     call ReadBit                         ; Literal?
 81   5D21 38 10                        jr c,CopyBytes
 82   5D23
 83   5D23 CD 3B 5D     EliasGamma      call ReadBit
 84   5D26 CB 11                        rl c
 85   5D28 D8                           ret  c                               ; Option to include the end of stream marker.
 86   5D29 CD 3B 5D                     call ReadBit
 87   5D2C 38 F5                        jr c,EliasGamma
 88   5D2E
 89   5D2E E5                           push hl
 90   5D2F 6E                           ld l,(hl)
 91   5D30 60                           ld h,b
 92   5D31 19                           add hl,de
 93   5D32 23                           inc hl
 94   5D33 ED B8        CopyBytes       lddr
 95   5D35 38 E4                        jr c,MainLoop
 96   5D37 E1                           pop hl
 97   5D38 2B                           dec hl
 98   5D39 18 E0                        jr MainLoop
 99   5D3B
100   5D3B 87           ReadBit         add a,a
101   5D3C C0                           ret nz
102   5D3D 7E                           ld a,(hl)
103   5D3E 2B                           dec hl
104   5D3F 17                           rla
105   5D40 C9                           ret
106   5D41
107   5D41              loader_start:
108   5D41                              include "src/fuckerding.inc"
# file opened: ./src/fuckerding.inc
  1+  5D41              effect_delay equ 6
  2+  5D41
  3+  5D41              load:
  4+  5D41 D9                           exx
  5+  5D42 21 B4 FE                     ld hl, lines_reloc
  6+  5D45 06 06                        ld b, effect_delay
  7+  5D47 0E 06                        ld c, effect_delay
  8+  5D49 D9                           exx
  9+  5D4A
 10+  5D4A 14                           inc d
 11+  5D4B 08                           ex af, af
 12+  5D4C 15                           dec d
 13+  5D4D F3                           di
 14+  5D4E DB FE                        in a, (254)
 15+  5D50 1F                           rra
 16+  5D51 E6 20                        and 0x20
 17+  5D53 F6 02                        or 2
 18+  5D55 4F                           ld c, a
 19+  5D56 BF                           cp a
 20+  5D57
 21+  5D57 C0           ld_break        ret nz
 22+  5D58              ld_start
 23+  5D58 CD E7 05                     call rom_ld_edge_1
 24+  5D5B 30 FA                        jr nc, ld_break
 25+  5D5D
 26+  5D5D 21 15 04                     ld hl, 0x415
 27+  5D60 10 FE        ld_wait         djnz ld_wait
 28+  5D62 2B                           dec hl
 29+  5D63 7C                           ld a, h
 30+  5D64 B5                           or l
 31+  5D65 20 F9                        jr nz, ld_wait
 32+  5D67
 33+  5D67 CD E3 05                     call rom_ld_edge_2
 34+  5D6A 30 EB                        jr nc, ld_break
 35+  5D6C
 36+  5D6C              ld_leader
 37+  5D6C 06 9C                        ld b, 0x9c
 38+  5D6E CD E3 05                     call rom_ld_edge_2
 39+  5D71 30 E4                        jr nc, ld_break
 40+  5D73
 41+  5D73 3E C6                        ld a, 0xc6
 42+  5D75 B8                           cp b
 43+  5D76 30 E0                        jr nc, ld_start
 44+  5D78
 45+  5D78 24                           inc h
 46+  5D79 20 F1                        jr nz, ld_leader
 47+  5D7B
 48+  5D7B
 49+  5D7B 06 C9        ld_sync         ld b, 0xc9
 50+  5D7D CD E7 05                     call rom_ld_edge_1
 51+  5D80 30 D5                        jr nc, ld_break
 52+  5D82
 53+  5D82 78                           ld a, b
 54+  5D83 FE D4                        cp 0xd4
 55+  5D85 30 F4                        jr nc, ld_sync
 56+  5D87 CD E7 05                     call rom_ld_edge_1
 57+  5D8A D0                           ret nc
 58+  5D8B
 59+  5D8B                              ; use black screen, as the rom routines mangled it
 60+  5D8B AF                           xor a
 61+  5D8C D3 FE                        out (254), a
 62+  5D8E
 63+  5D8E 26 00                        ld h, 0
 64+  5D90 06 B0                        ld b, 0xb0
 65+  5D92
 66+  5D92 18 11                        jr ld_marker
 67+  5D94
 68+  5D94 08           ld_loop         ex af, af
 69+  5D95 20 05                        jr nz, ld_flag
 70+  5D97
 71+  5D97 DD 75 00                     ld (ix), l
 72+  5D9A 18 03                        jr ld_next
 73+  5D9C
 74+  5D9C              ld_flag
 75+  5D9C                              ; handle flag without any checking
 76+  5D9C AF                           xor a  ; af' = Z, flag checked
 77+  5D9D 18 03                        jr 2f
 78+  5D9F
 79+  5D9F              ld_next
 80+  5D9F DD 23                        inc ix
 81+  5DA1 1B           ld_dec          dec de
 82+  5DA2              2
 83+  5DA2 08                           ex af, af
 84+  5DA3
 85+  5DA3 06 B2                        ld b, 0xb2
 86+  5DA5 2E 01        ld_marker       ld l, 1
 87+  5DA7              ld_8_bits
 88+  5DA7 CD BD 5D     rel2+*          call ld_edge_2
 89+  5DAA D0                           ret nc
 90+  5DAB 3E C5                        ld a, 0xc5
 91+  5DAD B8                           cp b
 92+  5DAE CB 15                        rl l
 93+  5DB0 06 B0                        ld b, 0xb0
 94+  5DB2 D2 A7 5D                     jp nc, ld_8_bits
 95+  5DB5
 96+  5DB5 7C                           ld a, h
 97+  5DB6 AD                           xor l
 98+  5DB7 67                           ld h, a
 99+  5DB8
100+  5DB8 7A                           ld a, d
101+  5DB9 B3                           or e
102+  5DBA 20 D8                        jr nz, ld_loop
103+  5DBC
104+  5DBC C9                           ret
105+  5DBD
106+  5DBD              rom_ld_edge_2 equ 0x5e3
107+  5DBD              rom_ld_edge_1 equ 0x5e7
108+  5DBD
109+  5DBD              ld_edge_2
110+  5DBD CD C1 5D     rel1+*:         call ld_edge_1
111+  5DC0 D0                           ret nc
112+  5DC1              ;breakpoint equ $-load + loader_base
113+  5DC1              ld_edge_1
114+  5DC1 D9                           exx
115+  5DC2 00                           nop
116+  5DC3
117+  5DC3 05                           dec b           ; 4
118+  5DC4 28 08                        jr z, do_effect ;12/7 jump = +16
119+  5DC6
120+  5DC6                              ; 4 + 7 + extra jr 12 = 23
121+  5DC6
122+  5DC6 00                           nop
123+  5DC7 00                           nop
124+  5DC8                              ; =31
125+  5DC8
126+  5DC8 00                           nop
127+  5DC9 D9                           exx  ; exx nop nop exx = 16
128+  5DCA 3E 13                        ld a, 0x16 - 1 - 2
129+  5DCC 18 24                        jr spin
130+  5DCE
131+  5DCE              do_effect       ; + 16 from above
132+  5DCE 3E 01                        ld a, 1 ;  7
133+  5DD0                              ;out (0xfe), a ; ; 11
134+  5DD0
135+  5DD0 41                           ld b, c         ; 4 ; timing constant
136+  5DD1
137+  5DD1                              ; 20 so far
138+  5DD1
139+  5DD1 5E                           ld e, (hl)      ; 7
140+  5DD2 23                           inc hl          ; 6
141+  5DD3 56                           ld d, (hl)      ; 7
142+  5DD4 23                           inc hl          ; 6
143+  5DD5 EB                           ex de, hl       ; 4
144+  5DD6 CB 06                        rlc (hl)         ; 15 ; contended memory thou
145+  5DD8 EB                           ex de, hl       ; 4
146+  5DD9                              ; 53
147+  5DD9
148+  5DD9
149+  5DD9 5E                           ld e, (hl)      ; 7
150+  5DDA 23                           inc hl          ; 6
151+  5DDB 56                           ld d, (hl)      ; 7
152+  5DDC 23                           inc hl          ; 6
153+  5DDD EB                           ex de, hl       ; 4
154+  5DDE CB 0E                        rrc (hl)         ; 15 ; contended memory thou
155+  5DE0 EB                           ex de, hl       ; 4
156+  5DE1                              ; 53
157+  5DE1
158+  5DE1
159+  5DE1 AF                           xor a
160+  5DE2 B2                           or d            ; 4
161+  5DE3                              ; -- 126
162+  5DE3
163+  5DE3                              ; adjusted: 12+7+10 = 29 either way
164+  5DE3 20 03                        jr nz, ok    ; 12/7
165+  5DE5 21 B4 FE                     ld hl, lines_reloc ; 10
166+  5DE8 28 03        ok:             jr z, adj    ; 12/7 symmetric branch timing adjustment
167+  5DEA 11 B4 FE                     ld de, lines_reloc ; 10
168+  5DED              adj:
169+  5DED                              ; -- + 29 = 155
170+  5DED 00                           nop
171+  5DEE                              ; 159, ~16*10
172+  5DEE
173+  5DEE 00                           nop
174+  5DEF D9                           exx  ; exx nop nop exx = 16
175+  5DF0
176+  5DF0 3E 0A                        ld a, 0x16 - 1 - 11
177+  5DF2
178+  5DF2 3D           spin:           dec a           ; ~358 T
179+  5DF3 20 FD                        jr nz, spin     ; 1 dec-loop = 16T
180+  5DF5 A7                           and a
181+  5DF6
182+  5DF6 04           ld_sample       inc b
183+  5DF7 C8                           ret z
184+  5DF8
185+  5DF8 3E 7F                        ld a, 0x7f
186+  5DFA DB FE                        in a, (0xfe)
187+  5DFC 1F                           rra
188+  5DFD D0                           ret nc
189+  5DFE
190+  5DFE A9                           xor c
191+  5DFF E6 20                        and 0x20
192+  5E01 28 F3                        jr z, ld_sample
193+  5E03
194+  5E03 79                           ld a, c
195+  5E04 2F                           cpl
196+  5E05 4F                           ld c, a
197+  5E06
198+  5E06                              ;and 7 ; 4
199+  5E06                              ;or 8 ; 4
200+  5E06                              ;out (0xfe), a ; 11
201+  5E06
202+  5E06 00                           nop
203+  5E07 00                           nop
204+  5E08 00                           nop
205+  5E09 00                           nop
206+  5E0A 00                           nop
207+  5E0B
208+  5E0B 37                           scf
209+  5E0C C9                           ret
210+  5E0D
211+  5E0D              lines_reloc equ $ - load + loader_base
212+  5E0D              lines:
213+  5E0D                              lua allpass
214+  5E0D ~                            local line1 = 0x49e0
215+  5E0D ~                            local line2 = line1 + 512
216+  5E0D ~                            local line3 = line2 + 512
217+  5E0D ~
218+  5E0D ~                            sj.add_word(line2 + 16)
219+  5E0D ~                            sj.add_word(line3 + 16)
220+  5E0D ~
221+  5E0D ~                            for i = 1, 15, 1
222+  5E0D ~                            do
223+  5E0D ~                              sj.add_word(line1 + 16 - i)
224+  5E0D ~                              sj.add_word(line1 + 16 + i)
225+  5E0D ~                              sj.add_word(line2 + 16 - i)
226+  5E0D ~                              sj.add_word(line2 + 16 + i)
227+  5E0D ~                              sj.add_word(line3 + 16 - i)
228+  5E0D ~                              sj.add_word(line3 + 16 + i)
229+  5E0D ~                            end
230+  5E0D F0 4B F0 4D                  endlua
230+  5E11 EF 49 F1 49
230+  5E15 EF 4B F1 4B
230+  5E19 EF 4D F1 4D
230+  5E1D EE 49 F2 49
230+  5E21 EE 4B F2 4B
230+  5E25 EE 4D F2 4D
230+  5E29 ED 49 F3 49
230+  5E2D ED 4B F3 4B
230+  5E31 ED 4D F3 4D
230+  5E35 EC 49 F4 49
230+  5E39 EC 4B F4 4B
230+  5E3D EC 4D F4 4D
230+  5E41 EB 49 F5 49
230+  5E45 EB 4B F5 4B
230+  5E49 EB 4D F5 4D
230+  5E4D EA 49 F6 49
230+  5E51 EA 4B F6 4B
230+  5E55 EA 4D F6 4D
230+  5E59 E9 49 F7 49
230+  5E5D E9 4B F7 4B
230+  5E61 E9 4D F7 4D
230+  5E65 E8 49 F8 49
230+  5E69 E8 4B F8 4B
230+  5E6D E8 4D F8 4D
230+  5E71 E7 49 F9 49
230+  5E75 E7 4B F9 4B
230+  5E79 E7 4D F9 4D
230+  5E7D E6 49 FA 49
230+  5E81 E6 4B FA 4B
230+  5E85 E6 4D FA 4D
230+  5E89 E5 49 FB 49
230+  5E8D E5 4B FB 4B
230+  5E91 E5 4D FB 4D
230+  5E95 E4 49 FC 49
230+  5E99 E4 4B FC 4B
230+  5E9D E4 4D FC 4D
230+  5EA1 E3 49 FD 49
230+  5EA5 E3 4B FD 4B
230+  5EA9 E3 4D FD 4D
230+  5EAD E2 49 FE 49
230+  5EB1 E2 4B FE 4B
230+  5EB5 E2 4D FE 4D
230+  5EB9 E1 49 FF 49
230+  5EBD E1 4B FF 4B
230+  5EC1 E1 4D FF 4D
231+  5EC5 00 00                        dw 0
232+  5EC7 00 00                        dw 0
233+  5EC9
234+  5EC9
235+  5EC9
# file closed: ./src/fuckerding.inc
109   5EC9              loader_end equ $
110   5EC9
111   5EC9              packed_code_start:
112   5EC9                              incbin "build/loading.pck"
113   61BA              Image_end equ $-1
114   61BA
115   61BA              End equ $
116   61BA
117   61BA                  display "Saving moo.tap"
118   61BA                  emptytap "moo.tap"
119   61BA                  savetap  "moo.tap", basic, "MoonRn", basic_start, End - basic_start, 10
120   61BA                  tapout "moo.tap"
121   61BA                  incbin "build/code.pck"
122   A6FC                  tapend
123   A6FC
# file closed: src/loader.asm
